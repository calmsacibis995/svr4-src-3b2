
#ident	"@(#)cmd-3b2:inst/bin/partition	1.8.7.3"

#
# partition
#
# Partition the disk(s). Expects DRIVEID_0 and CYLSIZE_0 to be set to the
# drive ID and cylinder size (sectors) of disk 1. Similarly, DRIVEID_1 and
# CYLSIZE_1 must be present for dual-disk systems. Writes the generated
# "vfstab" (for /usr) to stdout. Makes filesystems on both disks, but doesn't
# mount anything.
#
# Note that this program "exec"s itself when asked to start over again. Any
# command-line arguments must be passed through these "exec"s.
#

if [ "${EUDEBUG:-}" -eq 1 ]
then
	echo "\n** running $0 script  **\n"  >&2
	set -x
fi


set -ue
myname="${0}"

#**********************
# "fmthard -r" prints several shell variable assignments:
#	rootmin		Minimum size of a root partition in sectors
#	swapbase	Start sector of the swap partition
#	swapmin		Minimum size of a swap partition in sectors
#	usrmin		Minimum size of a usr partition in sectors
#	diskmin		Minimum size of system disk in sectors
#	stndmin		Minimum size of stand partition in sectors
#	varmin		Minimum size of var partition in sectors
#	homemin		Minimum size of home partition in sectors
#*************************
eval `fmthard -r ${RSIX_0}`

if [ -z "${rootmin:-}" ]
then
	echo "${myname}: Minimum value assignment incomplete." >&2
	exit 1
fi

#
# Read the VTOC default partitioning for each disk
#
for drive in 0 ${DRIVEID_1:+1}
do
	if [ -n "${DRIVEID_1:-}" ]
	then
		number=`ignore expr ${drive} + 1`
	else
		number=${drive}
	fi

	# "fmthard -c[0-2]" where:
	#	0 is single disk
	#	1 is first dual disk
	#	2 is second dual disk
	# the "-p" returns several shell variable assignments:
	#	rootsize
	#	swapsize
	#	stndsize
	#	homesize
	#	bootsize_0	bootsize_1
	#	usrsize_0	usrsize_1
	#	varsize_0	varsize_1
	#	disksize_0	disksize_1

	eval `eval fmthard -p -c${number} \\\${RSIX_$drive}`

	if [ -z "`eval echo \\\${disksize_${drive}:-}`" \
	    -o -z "`eval echo \\\${bootsize_${drive}:-}`" ]
	then
		echo "${myname}: boot or disk size undefined" >&2
		exit 1
	fi
done


if [ -z "${rootsize:-}" -o -z "${swapsize:-}" ] 
then
	echo "${myname}: root or swap size undefined" >&2
	exit 1
fi

if [ -z "${stndsize:-}" -o -z "${homesize:-}" ] 
then
	echo "${myname}: stand or home size undefined" >&2
	exit 1
fi

usrsize=${usrsize_0:-${usrsize_1:?"${myname}: No \"usr\" size!"}}
varsize=${varsize_0:-${varsize_1:?"${myname}: No \"var\" size!"}}

if [ -n "${DRIVEID_1:-}" ]
then
	echo "\

	Following is  default Configuration for your two disk system
	------------------------------------------------------------

	Disk #1					Disk #2
	-------					------

	Disksize: $disksize_0			Disksize:  $disksize_1

	root:  $rootsize			usr:   $usrsize_1
	swap:  $swapsize			var:   $varsize_1
	stand: $stndsize			boot:  $bootsize_1
	home:  $homesize							
	boot:  $bootsize_0\n"  >&2

else 
	echo "\

	Following is  default Configuration for your single disk system
	---------------------------------------------------------------

			Disksize: $disksize_0 (blocks)	

			root:  $rootsize		
			swap:  $swapsize	
			stand: $stndsize			
			usr:   $usrsize_0
			var:   $varsize_0
			home:  $homesize		
			boot:  $bootsize_0\n"  >&2
fi

echo "Hit <return> to continue: \n" >&2
read ret_hit

#
# Define allocatable space for each disk. Also defines the
# largest "swap" partition to be allowed by the following
# askx.
#
if [ -n "${DRIVEID_1:-}" ]
then
	remain_0=`ignore expr ${disksize_0} - ${bootsize_0}`
	remain_1=`ignore expr ${disksize_1} - ${bootsize_1}`
	allow=`ignore expr ${remain_0} - ${rootmin} - ${stndmin} - ${homemin}`
else
	remain_0=`ignore expr ${disksize_0} - ${bootsize_0}`
	allow=`ignore expr ${remain_0} - ${rootmin} - ${stndmin} - ${usrmin} - ${varmin}`
fi

swapsize=`askx -q "\
How many blocks for the \"swap\" partition?" \
    -h "\
The \"swap\" partition holds inactive processes during periods of heavy
system load. It must be at least ${swapmin} blocks long.  More space may be
allocated (up to  ${allow}  blocks) if you so desire.  The default \"swap\"
partition size for your disk is ${swapsize}  blocks.  Enter the desired swap
size, \"quit\" to quit or \"again\" to start over.
NOTE: partition sizes are always rounded up to 
cylinder ( ${CYLSIZE_0} block ) boundaries." \
    -s -n ${swapmin}:${allow} -d ${swapsize} -c quit -c again`

if [ "${swapsize}" = quit ]
then
	exit 1
elif [ "${swapsize}" = again ]
then
	exec ${myname}
fi

swapsize=`ignore expr \( \( ${swapsize} + ${bootsize_0} + ${CYLSIZE_0} - 1 \) / ${CYLSIZE_0} \* ${CYLSIZE_0} \) - ${bootsize_0}`

if [ ${swapsize} -gt ${allow} ]
then
	swapsize=${allow}
fi

remain_0=`ignore expr ${remain_0} - ${swapsize}`

#root partition
if [ -n "${DRIVEID_1:-}" ]
then
	allow=`ignore expr ${remain_0} - ${stndmin} - ${homemin}`
else
	allow=`ignore expr ${remain_0} - ${stndmin} - ${usrmin} - ${varmin}`
fi

rootsize=`askx -q "\
How many blocks for the \"root\" partition?" \
    -h "\
The \"root\" partition holds the UNIX kernel and the basic commands. Some free
space is required here for temporary files.  The \"root\" partition must be at
least  ${rootmin}  blocks long.  More space may be  allocated (as  many as  ${allow}
blocks) if you  so desire.  The default \"root\" partition size for your disk
is ${rootsize} blocks. Type the desired \"root\" size, \"quit\" to quit or \"again\" to 
start over.  NOTE: partition sizes are always rounded up to 
cylinder ( ${CYLSIZE_0} block ) boundaries." \
    -s -n ${rootmin}:${allow} -d ${rootsize} -c quit -c again`

if [ "${rootsize}" = quit ]
then
	exit 1
elif [ "${rootsize}" = again ]
then
	exec ${myname}
fi

rootsize=`ignore expr \( ${rootsize} + ${CYLSIZE_0} - 1 \) / ${CYLSIZE_0} \* ${CYLSIZE_0}`

if [ ${rootsize} -gt ${allow} ]
then
	rootsize=${allow}
fi

remain_0=`ignore expr ${remain_0} - ${rootsize}`

case `askx -q "\
What file system type for the \"root\" partition?" \
	-m "\
The file system types available for the \"root\" partition are:

	1) System V 1K
	2) System V 2K " \
	-s -d 2 -c 1 -c 2 -c quit -c again` in
	quit)
		exit 1 ;;
	again)
		exec ${myname} ;;
	1)
		roottype=s5
		rootblksz=1024
		;;
	2)
		roottype=s5
		rootblksz=2048
		rootgap="-g ${RD_GAP}"		#gap parameter to vmkfs
		;;
esac

#
# Allocate space for /stand filesystem
#

if [ -n "${DRIVEID_1:-}" ]
then
	allow=`ignore expr ${remain_0} - ${homemin}`
else
	allow=`ignore expr ${remain_0} - ${usrmin} - ${varmin}`
fi

stndsize=`askx -q "\
How many blocks for the \"stand\" partition?" \
    -h "\
The \"stand\" partition contains all standalone programs as well as all
text files necessary for booting.  The \"stand\" partition must be at
least  ${stndmin}  blocks long.  More space may be  allocated (as  many 
as ${allow} blocks) if you  so desire.  The default \"stand\" partition 
size for your disk is ${stndsize} blocks. Type the desired \"stand\" 
size, \"quit\" to quit or \"again\" to start over.  
NOTE: partition sizes are always rounded up to 
cylinder ( ${CYLSIZE_0} block ) boundaries." \
    -s -n ${stndmin}:${allow} -d ${stndsize} -c quit -c again`

if [ "${stndsize}" = quit ]
then
	exit 1
elif [ "${stndsize}" = again ]
then
	exec ${myname}
fi

stndsize=`ignore expr \( ${stndsize} + ${CYLSIZE_0} - 1 \) / ${CYLSIZE_0} \* ${CYLSIZE_0}`

if [ ${stndsize} -gt ${allow} ]
then
	stndsize=${allow}
fi
remain_0=`ignore expr ${remain_0} - ${stndsize}`

stndtype=bfs
stndblksz=""

#
# Decide which disk to place "usr" on. Always use disk 2 when
# disk 1 doesn't have enough space for a minimal "usr".
#
if [ -n "${DRIVEID_1:-}" -a ${remain_0} -lt ${usrmin} ]
then
	#
	# "usr" will only fit on disk 2
	#
	case `askx -m "\
There are ${remain_0} blocks remaining on disk 1. The \"usr\" partition requires
at least ${usrmin} blocks.  Hence, it will not fit on disk 1 as it is
partitioned. It is being placed on disk 2." \
	    -q "\
Type \"go\" to proceed, \"again\" to start over." \
	    -h "\
The \"usr\" partition contains commands required for system operation (which 
are less critical than commands in \"root\" partition.)  Default partitioning
places this partition on disk 2.  Some applications may, however prefer to keep
this on disk 1.  Type \"quit\" if you wish to stop, \"again\" if you'd like to 
repartition disk 1 (possibly to allow enough room for the \"usr\" partition on 
that disk) or \"go\" if you want to proceed (with \"usr\" on disk 2).  
NOTE: partition sizes are always rounded up to cylinder ( ${CYLSIZE_1} block ) 
boundaries." \
	    -c go -c again -c quit` in
	go)
		;;
	again)
		exec ${myname}
		;;
	quit)
		exit 1
		;;
	esac
	usrflag=1

elif [ -n "${DRIVEID_1:-}" ]
then
	#
	# "usr" will fit on either disk
	#
	case `askx -m "\
There are ${remain_0} blocks remaining on disk 1 and ${remain_1} blocks on
disk 2. The \"usr\" partition requires at least ${usrmin} blocks; if
default configuration is used ${usrsize} blocks would have been allocated. The 
system will typically perform better with \"usr\" on disk 2." \
	    -q "\
Which disk should hold the \"usr\" 
partition?" \
	    -h "\
The \"usr\" partition contains commands required for system operation (which are
less critical than commands in \"root\" partition.)  Default partitioning places 
this partition on disk 2.  However, it may be placed on either of your two disks. 
Type \"1\" to put \"usr\" on disk 1, \"2\" to place it on disk 2, \"quit\" if wish 
to stop or \"again\" if you want to start the partitioning over again.
NOTE: partition sizes are always rounded up to cylinder boundaries." \
	    -c 1 -c 2 -c "quit" -c "again" -d 2` in
	1)
		usrflag=0 ;;
	2)
		usrflag=1 ;;
	again)
		exec ${myname}
		;;
	quit)
		exit 1
		;;
	esac
else
	#
	# "usr" must go on disk 1, since disk 2 does not exist.
	#
	usrflag=0
fi

case "${usrflag}" in
0) 	eval allow=`ignore expr ${remain_0} - ${homemin}`
	CYLSIZE=CYLSIZE_0
	;;
1) 	eval allow=`ignore expr ${remain_1} - ${varmin}`
	CYLSIZE=CYLSIZE_1
	;;
esac


usrsize=`askx -q "\
How many blocks for the \"usr\" partition?" \
    -h "\
The \"usr\" partition holds additional commands, libraries, required for system
operation.  It must be at least ${usrmin} blocks.  In any application, its size
is typically limited to ${usrsize} blocks (default size).  More space may be 
allocated (up to ${allow} blocks) if you so desire. If default configuration is
used \"usr\" partition size would be ${usrsize} blocks. Type the desired \"usr\" 
size, \"quit\" to quit or \"again\" to start over.  NOTE: partition sizes are always 
rounded up to cylinder ( ${CYLSIZE} block ) boundaries." \
    -s -n ${usrmin}:${allow} -d ${usrsize} -c quit -c again`

if [ "${usrsize}" = quit ]
then
	exit 1
elif [ "${usrsize}" = again ]
then
	exec ${myname}
fi

eval usrcyl=\${CYLSIZE_${usrflag}}
usrsize=`ignore expr \( ${usrsize} + ${usrcyl} - 1 \) / ${usrcyl} \* ${usrcyl}`

if [ ${usrsize} -gt ${allow} ]
then
	usrsize=${allow}
fi

eval remain_${usrflag}="\`ignore expr \${remain_${usrflag}} - ${usrsize}\`"

case `askx -q "\
What file system type for the \"usr\" partition?" \
	-m "\
The file system types available for the \"usr\" partition are:

	1) System V 1K
	2) System V 2K " \
	-s -d 2 -c 1 -c 2 -c quit -c again` in
	quit)
		exit 1 ;;
	again)
		exec ${myname} ;;
	1)
		usrtype=s5
		usrblksz=1024
		;;
	2)
		usrtype=s5
		usrblksz=2048
		usrgap="-g ${RD_GAP}"		#gap  size for vmkfs
		;;
esac


#
# Decide which disk to place "var" on. Always use disk 2 when
# disk 1 doesn't have enough space for a minimal "var".
#
if [ -n "${DRIVEID_1:-}" -a ${remain_0} -lt ${varmin} ]
then
	#
	# "var" will only fit on disk 2
	#
	case `askx -m "\
There are ${remain_0} blocks remaining on disk 1. The \"var\" partition requires
at least ${varmin} blocks.  Hence, it will not fit on disk 1 as it is
partitioned. It is being placed on disk 2." \
	    -q "\
Type \"go\" to proceed, \"again\" to start over." \
	    -h "\
The \"var\" partition contains \'var\'ying files on a 3B2 Unix system such 
as spooled files, logfiles etc.  System performance is  typically greater with 
the \"var\" partition on disk 2. Some applications may, however, prefer to keep 
this partition on disk 1.  Type \"quit\" if you wish to stop, \"again\" if you'd 
like to repartition disk 1 (possibly to allow enough room for the \"usr\" 
partition on that disk) or \"go\" if you want to proceed (with \"usr\" 
on disk 2).  NOTE: partition sizes are always rounded up to cylinder 
( ${CYLSIZE_1} block ) boundaries." \
	    -c go -c again -c quit` in
	go)
		;;
	again)
		exec ${myname}
		;;
	quit)
		exit 1
		;;
	esac
	varflag=1

elif [ -n "${DRIVEID_1:-}" ]
then
	#
	# "var" will fit on either disk
	#
	case `askx -m "\
There are ${remain_0} blocks remaining on disk 1 and ${remain_1} blocks on
disk 2. The \"var\" partition requires at least ${varmin} blocks; by
default, ${varsize} blocks would have been allocated. The system will
typically perform better with \"var\" on disk 2." \
	    -q "\
Which disk should hold the \"var\" 
partition?" \
	    -h "\
The \"var\" partition contains \'var\'ying files on a 3B2 Unix system such 
as spooled files, logfiles etc.  System performance is  typically greater with 
the \"var\" partition on disk 2.  It may be placed on either of your 
two disks. Type \"1\" to put \"var\" on disk 1, \"2\" to place it on disk 2, 
\"quit\" if wish to stop or \"again\" if you want to start the partitioning over 
again.  NOTE: partition sizes are always rounded up to cylinder boundaries." \
	    -c 1 -c 2 -c "quit" -c "again" -d 2` in
	1)
		varflag=0 ;;
	2)
		varflag=1 ;;
	again)
		exec ${myname}
		;;
	quit)
		exit 1
		;;
	esac
else
	#
	# "var" must go on disk 1, since disk 2 does not exist.
	#
	varflag=0
fi

case "${varflag}" in
0) 	eval allow=`ignore expr ${remain_0} - ${homemin}`
	CYLSIZE=CYLSIZE_0
	;;
1) 	allow=${remain_1}
	CYLSIZE=CYLSIZE_1
	;;
*)	echo "unknown varflag value in partition script"
	exit 1
	;;
esac


varsize=`askx -q "\
How many blocks for the \"var\" partition?" \
    -h "\
The \"var\" partition holds \'var\'ying files of 3B2 Unix System such as 
spooled files and log files.   Since number and sizes of these files vary 
considerably based on activity of the system, choose a optimum higher bound 
for this partition size.  The \"var\" partition must be at least ${varmin} 
blocks long. More space may be allocated (up to ${allow} blocks) if you so 
desire. If default configuration is used \"var\" partition size would be ${varsize} 
blocks. Type the desired \"var\" size, \"quit\" to quit or \"again\" to start over.  
NOTE: partition sizes are always rounded up to cylinder ( ${CYLSIZE} block ) 
boundaries." \
    -s -n ${varmin}:${allow} -d ${varsize} -c quit -c again`

if [ "${varsize}" = quit ]
then
	exit 1
elif [ "${varsize}" = again ]
then
	exec ${myname}
fi

eval varcyl=\${CYLSIZE_${varflag}}
varsize=`ignore expr \( ${varsize} + ${varcyl} - 1 \) / ${varcyl} \* ${varcyl}`

if [ ${varsize} -gt ${allow} ]
then
	varsize=${allow}
fi

eval remain_${varflag}="\`ignore expr \${remain_${varflag}} - ${varsize}\`"

case `askx -q "\
What file system type for the \"var\" partition?" \
	-m "\
The file system types available for the \"var\" partition are:

	1) System V 1K
	2) System V 2K " \
	-s -d 2 -c 1 -c 2 -c quit -c again` in
	quit)
		exit 1 ;;
	again)
		exec ${myname} ;;
	1)
		vartype=s5
		varblksz=1024
		;;
	2)
		vartype=s5
		varblksz=2048
		;;
esac


#
# Decide which disk to place "home" on. Always use disk 1 when
# disk 2 doesn't have enough space for a minimal "home".
#
if [ -n "${DRIVEID_1:-}" ]
then
	if [ ${remain_1} -lt ${homemin} ]
	then
		#
		# "home" will only fit on disk 1
		#
		case `askx -m "\
There are ${remain_1} blocks remaining on disk 2. The \"home\" partition requires
at least ${homemin} blocks.  Hence, it will not fit on disk 2 as it is
partitioned. It is being placed on disk 1." \
	    	-q "\
Type \"go\" to proceed, \"again\" to start over." \
	    	-h "\
The \"home\" partition contains user files such as user logins, user files etc 
and it can be placed on any disk. Some applications may, however, prefer to keep 
this partion on disk 2.   Type \"quit\" if you wish to stop, \"again\" if you'd 
like to repartition disk 2 (possibly to allow enough room for the \"home\" 
partition on that disk) or \"go\" if you want to proceed (with \"home\" on 
disk 1).  NOTE: partition sizes are always rounded up to cylinder ( ${CYLSIZE_0} 
block ) boundaries." \
	    	-c go -c again -c quit` in
		go)
			;;
		again)
			exec ${myname}
			;;
		quit)
			exit 1
			;;
		esac
		homeflag=0

	else
		#
		# "home" will fit on either disk
		#
		case `askx -m "\
There are ${remain_0} blocks remaining on disk 1 and ${remain_1} blocks on
disk 2. The \"home\" partition requires at least ${homemin} blocks; by
default, ${homesize} blocks would have been allocated. The system will
typically have \"home\" on disk with greater remaining space." \
	    	-q "\
Which disk should hold the \"home\" partition?" \
	    	-h "\
The \"home\" partition contains user files such as user logins, user files etc 
and it can be placed on any disk.   It may be place on either one of of your two 
disks. Type \"1\" to put \"home\" on disk 1, \"2\" to place it on disk 2, \"quit\" 
if wish to stop or \"again\" if you want to start the partitioning over again.
NOTE: partition sizes are always rounded up to 
cylinder boundaries." \
	    -c 1 -c 2 -c "quit" -c "again" -d 2` in
		1)
			homeflag=0 ;;
		2)
			homeflag=1 ;;
		again)
			exec ${myname}
			;;
		quit)
			exit 1
			;;
		esac
	fi
else
	#
	# "home" must go on disk 1, since disk 2 does not exist.
	#
	homeflag=0
fi

case "${homeflag}" in
0) 	allow=${remain_0}
	CYLSIZE=CYLSIZE_0
	;;
1) 	allow=${remain_1}
	CYLSIZE=CYLSIZE_1
	;;
*)	echo "unknown homeflag value in partition script"
	exit 1
	;;
esac


homesize=`askx -q "\
How many blocks for the \"home\" partition?" \
    -h "\
The \"home\" partition holds user login files and other user specific
files.   This could be typically allocated all remaining space on the disk.
The \"home\" partition must be at least ${homemin} blocks long. More space 
may be allocated (up to remaining ${allow} blocks) if you so desire. If default 
configuration is used \"home\" partition size is ${homesize} blocks. Type the 
desired \"home\" size, \"quit\" to quit or \"again\" to start over.  
NOTE: partition sizes are always rounded up to cylinder ( ${CYLSIZE} block ) 
boundaries." \
    -s -n ${homemin}:${allow} -d ${homesize} -c quit -c again`

if [ "${homesize}" = quit ]
then
	exit 1
elif [ "${homesize}" = again ]
then
	exec ${myname}
fi

eval homecyl=\${CYLSIZE_${homeflag}}
homesize=`ignore expr \( ${homesize} + ${homecyl} - 1 \) / ${homecyl} \* ${homecyl}`

if [ ${homesize} -gt ${allow} ]
then
	homesize=${allow}
fi

eval remain_${homeflag}="\`ignore expr \${remain_${homeflag}} - ${homesize}\`"

case `askx -q "\
What file system type for the \"home\" partition?" \
	-m "\
The file system types available for the \"home\" partition are:

	1) System V 1K
	2) System V 2K " \
	-s -d 2 -c 1 -c 2 -c quit -c again` in
	quit)
		exit 1 ;;
	again)
		exec ${myname} ;;
	1)
		hometype=s5
		homeblksz=1024
		;;
	2)
		hometype=s5
		homeblksz=2048
		;;
esac

bootbase=0
swapbase=`ignore expr ${bootbase} + ${bootsize_0}`
rootbase=`ignore expr ${swapbase} + ${swapsize}`
stndbase=`ignore expr ${rootbase} + ${rootsize}`

#base so far for each disk
dskbase_0=`ignore expr  ${bootbase} + ${bootsize_0} + ${rootsize} \
			+ ${swapsize} + ${stndsize}`

if [ -n "${DRIVEID_1:-}" ]
then
	dskbase_1=`ignore expr ${bootbase} + ${bootsize_1}`
fi

if [ ${usrflag} -eq 0 ]
then
	usrbase_0=${dskbase_0}
	usrsize_0=${usrsize}
	usrbase_1=0
	usrsize_1=0

	dskbase_0=`ignore expr ${dskbase_0} + ${usrsize}`
else
	usrbase_0=0
	usrsize_0=0
	usrbase_1=${dskbase_1}
	usrsize_1=${usrsize}

	dskbase_1=`ignore expr ${dskbase_1} + ${usrsize}`
fi

if [ ${varflag} -eq 0 ]
then
	varbase_0=${dskbase_0}
	varsize_0=${varsize}
	varbase_1=0
	varsize_1=0

	dskbase_0=`ignore expr ${dskbase_0} + ${varsize}`
else
	varbase_0=0
	varsize_0=0
	varbase_1=${dskbase_1}
	varsize_1=${varsize}

	dskbase_1=`ignore expr ${dskbase_1} + ${varsize}`
fi

if [ ${homeflag} -eq 0 ]
then
	homebase_0=${dskbase_0}
	homesize_0=${homesize}
	homebase_1=0
	homesize_1=0

	dskbase_0=`ignore expr ${dskbase_0} + ${homesize}`
else
	homebase_0=0
	homesize_0=0
	homebase_1=${dskbase_1}
	homesize_1=${homesize}

	dskbase_1=`ignore expr ${dskbase_1} + ${homesize}`
fi

echo "*
    ${p_boot} 	${v_boot} 	01	${bootbase}	${bootsize_0}
    ${p_root} 	${v_root} 	00	${rootbase}	${rootsize}
    ${p_swap} 	${v_swap} 	01	${swapbase}	${swapsize}
    ${p_usr} 	${v_usr} 	00	${usrbase_0}	${usrsize_0}
    ${p_backup} ${v_backup} 	01	0		${disksize_0}
    ${p_stand} 	${v_stand} 	00	${stndbase}	${stndsize}
    ${p_var} 	${v_var} 	00	${varbase_0}	${varsize_0}
    ${p_home} 	${v_home} 	00	${homebase_0}	${homesize_0}" \
	| fmthard -s - ${RSIX_0} > /dev/null


#make root with gapsize 4 (performance reasons)
vmkfs -f ${roottype} -b "${rootblksz}" ${rootgap:-}  ${RROOT_0} > /dev/null

if [ ${stndsize} -ne 0 ]
then
	vmkfs -f ${stndtype} ${RSTAND_0} > /dev/null
fi
if [ ${usrsize_0} -ne 0 ]
then
	#make usr with gapsize 4 (performance reasons)
	vmkfs -f ${usrtype} -b "${usrblksz}" ${usrgap:-}  ${RUSR_0} > /dev/null
fi

if [ ${varsize_0} -ne 0 ]
then
	vmkfs -f ${vartype} -b "${varblksz}" ${RVAR_0} > /dev/null
fi
if [ ${homesize_0} -ne 0 ]
then
	vmkfs -f ${hometype} -b "${homeblksz}" ${RHOME_0} > /dev/null
fi

if [ -n "${DRIVEID_1:-}" ]
then
	echo "*
	${p_usr} 	${v_usr} 	00	${usrbase_1}	${usrsize_1}
    	${p_var} 	${v_var}	00	${varbase_1}	${varsize_1}
    	${p_home} 	${v_home} 	00	${homebase_1}	${homesize_1}
	${p_backup}	${v_backup} 	01	0		${disksize_1}
	${p_boot} 	${v_boot} 	01	${bootbase}	${bootsize_1}" \
		| fmthard -s - ${RSIX_1} > /dev/null

	if [ ${usrsize_1} -ne 0 ]
	then
		#make usr with gapsize 4 (performance reasons)
		vmkfs -f ${usrtype} -b "${usrblksz}" ${usrgap:-} ${RUSR_1} > /dev/null
	fi

	if [ ${varsize_1} -ne 0 ]
	then
		vmkfs -f ${vartype} -b "${varblksz}" ${RVAR_1} > /dev/null
	fi

	if [ ${homesize_1} -ne 0 ]
	then
		vmkfs -f ${hometype} -b "${homeblksz}" ${RHOME_1} > /dev/null
	fi
fi

eval echo "\"
\${USR_${usrflag}}    \${RUSR_${usrflag}}   /usr   ${usrtype}  1  yes	-
\${VAR_${varflag}}    \${RVAR_${varflag}}   /var   ${vartype}  1  yes	-
\${HOME_${homeflag}}  \${RHOME_${homeflag}} /home  ${hometype} 1  yes	-
\${STAND_0}           \${RSTAND_0}	    /stand bfs	       1  yes	-\""

