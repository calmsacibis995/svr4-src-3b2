#ident	"@(#)lp.admin:printers/filters/Form.mod2	1.3"
form=Add/Modify Filter $ARG2

help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO

`indicator -w;
	set -l name_px="/tmp/lp.rpx$VPID";
	ls /etc/lp/printers > $name_px;
	echo "any" >> $name_px;
	echo "all" >> $name_px;
	echo "" >> $name_px;
	set -e basicdata="/tmp/lp.flm$VPID";
	`

`if [ $ARG1 = "default_filter" ];
	then
	message "loading default filter";
	set -l input="simple";
	set -l output="simple";
	set -l printer_types="any";
	set -l printers="any";
	set -l filter_type="slow";
	else
	message "loading filter";
	fmlgrep ":$ARG1:" /etc/lp/filter.table | set -l line;
	echo "$line" | fmlcut -d: -f4 - |
	set -l input;
	echo "$line" | fmlcut -d: -f6 - |
	set -l output;
	echo "$line" | fmlcut -d: -f2 - |
	set -l printer_types;
	echo "$line" | fmlcut -d: -f3 - |
	set -l printers;
	echo "$line" | fmlcut -d: -f7 - |
	set -l filter_type;
	echo "$line" | fmlcut -d: -f8 - |
	set -l command;
	echo "$line" | fmlcut -d: -f9 - |
	set -e options;
	fi;
	`
done=`
    if [ -z $F6 ];
    then
    set -l CMD="nop";
    message "Filter Command is mandatory - please reenter";
    else
	echo 'Input Types: '$F1 > $basicdata;
	echo 'Output Types: '$F2 >> $basicdata;
	if [ -n $F3 ];
	then
	echo 'Printer Types: '$F3 >> $basicdata;
	fi;
	if [ -n $F4 ];
	then
	echo 'Printers: '$F4 >> $basicdata;
	fi;
	echo 'Filter Type: '$F5 >> $basicdata;
	echo 'Command: '$F6 >> $basicdata;
	if [ -n $F7 ];
	then
	echo 'Options: '$F7 >> $basicdata;
	fi;
	if [ $F8 = "yes" ];
	then
	set -l CMD="OPEN FORM $OBJ_DIR/Form.options $ARG2 ";
	else
	if [ $ARG1 != $ARG2 ];
	then message -w "Adding $ARG2 to the filter table ";
	fi;
	if [ $ARG1 = $ARG2 ];
	then message -w "Updating $ARG2 in the filter table ";
	fi;
	    /usr/lib/lpfilter -f $ARG2 -F $basicdata;
	message "";
	set -l CMD="close";
	fi;
     fi;
	`$CMD

close=`
	/usr/bin/rm $basicdata;
	unset	-e basicdata;
	unset	-l input;
	unset	-l output;
	unset	-l printers;
	unset	-l printer_types;
	unset	-l filter_type;
	unset	-l command;
	unset	-e options;
	unset	-l line;
	`

name=Input types: 
nrow=2
ncol=1
frow=2
fcol=20
rows=1
columns=24
lininfo=Form.add.1:F2
scroll=yes
value=$input
valid=`
    regex -v "$F1"
	'^[Nn][Oo][Nn][Ee]$'		'"none" is a reserved word'
	'^[Aa][Ll][Ll]$'		'all'
	'^[-a-zA-Z0-9]{1,14}([, ][-a-zA-Z0-9]{1,14})*$'	'ok'
	'^.*$'	'names may be 1-14 letters, digits and dashes'
    | set -l badval;
    if [ "$badval" = "all" ];
    then
	true;
    elif [ "$badval" != "ok" ];
    then
	false;
    else
	true;
    fi;
`
invalidmsg="Invalid type(s):  $badval."
fieldmsg='Enter the content types this filter can accept'

name=Output types:
nrow=3
ncol=1
frow=3
fcol=20
rows=1
columns=24
lininfo=Form.add.1:F3
scroll=yes
value=$output
valid=`
    regex -v "$F2"
	'^[Nn][Oo][Nn][Ee]$'		'"none" is a reserved word'
	'^[Aa][Ll][Ll]$'		'all'
	'^[-a-zA-Z0-9]{1,14}([, ][-a-zA-Z0-9]{1,14})*$'	'ok'
	'^.*$'	'names may be 1-14 letters, digits and dashes'
    | set -l badval;
    if [ "$badval" = "all" ];
    then
	true;
    elif [ "$badval" != "ok" ];
    then
	false;
    else
	true;
    fi;
`
fieldmsg='Enter the content types this filter can produce:'
invalidmsg='Invalid type(s):  names must be 1-14 letters, digits, and dashes.'

name=Printer types: 
nrow=4
ncol=1
lininfo=Form.add.1:F4
frow=4
fcol=20
rows=1
columns=24
scroll=yes
value=$printer_types
valid=`indicator -w;
    regex -v "$F3"
	'^([Aa][Nn][Yy])$1$'		'any'
	'^([Nn][Oo][Nn][Ee])$1$'	'"none" is a reserved word'
	'^[_a-zA-Z0-9]{1,14}([, ][_a-zA-Z0-9]{1,14})*$' 'ok'
	'^.*'				'syntax'
    | set -l badval;
    if [ "$badval" = 'any' ];
    then true;
    else
	if [ "$badval" = 'syntax' ];
	then false;
	set -l badval='it must be 1-14 letters, numbers and underscores';
	else true;
	fi;
    fi;
	`
fieldmsg='Enter the types of printers with which this filter may be used'
invalidmsg="Invalid printer type:  $badval"

name=Printers: 
nrow=5
ncol=1
lininfo=Form.add.1:F5
frow=5
fcol=20
rows=1
columns=24
scroll=yes
value=$printers
rmenu=OPEN MENU $OBJ_DIR/Menu.pr.ch
fieldmsg='Enter the printers on which the filter may be used'
choicemsg='MARK printer choices then press [ENTER]'

valid=`indicator -w;
	unset -l bad_one;
	if [ -z "$F4" ];
	then
		set -l name_valid=true;
		true;
	else
		set -l name_valid=true;
	fi;
	echo "$F4" | tr " ," "[\012*]" | regex -e '^(.*)$0$'
	'`fmlgrep "^$m0\$" $name_px || set -l bad_one="$m0" -l name_valid=false`' > /dev/null`$name_valid
invalidmsg="$bad_one invalid printer - press [CHOICES] for selection"



name=Fast or slow filter:
nrow=6
ncol=1
frow=6
fcol=21
rows=1
columns=4
lininfo=Form.add.1:F6
value=$filter_type
rmenu={ slow fast }
menuonly=true
fieldmsg='Enter "fast" if the filter expects to directly control a printer'
invalidmsg='Filter type must be either "fast" or "slow".'

name=Filter command:
nrow=8
ncol=1
frow=9
fcol=2
rows=1
columns=40
scroll=true
value=$command
lininfo=Form.add.1:F7
fieldmsg='Enter the full pathname of the command with fixed options'

valid=`
	if [ -z $F6 ];
	then
	set -l badval="The filter command is mandatory";
	false;
	else
	echo "$F6" | fmlcut -d' ' -f1 - | set -l command;
	if [ -x "$command" ];
	then
		true;
	else
		set -l badval="$command is not a pathname to an executable command";
		false;
	fi;
	fi;
	`
invalidmsg="$badval"

name=Existing option templates:
nrow=10
ncol=1
frow=11
fcol=1
rows=1
columns=44
scroll=true
show=`if [ -z $options ];
	then false;
	else true;
	fi;`

rmenu=OPEN MENU $OBJ_DIR/Menu.template $ARG1 
fieldmsg="Press CHOICES to select existing templates to keep"
choicemsg="MARK templates to keep then press ENTER"

name=New filter options?
nrow=12
ncol=1
frow=12
fcol=22
rows=1
columns=4
value=yes
menuonly=true
rmenu={ "yes" "no" }
fieldmsg='New filter option templates?'



